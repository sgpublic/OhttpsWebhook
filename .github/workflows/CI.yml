name: CI

on:
  push:
    tags:
      - 'v*'

env:
  BINARY_PREFIX: "ohttps"
  BINARY_SUFFIX: ""
  COMMIT_ID: "${{ github.sha }}"
  PR_PROMPT: "::warning:: Build artifact will not be uploaded due to the workflow is trigged by pull request."

jobs:
  build:
    name: Build binary CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: ["386", amd64, arm, arm64]
        exclude:
          - goos: darwin
            goarch: arm
          - goos: darwin
            goarch: "386"
      fail-fast: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        if: matrix.goos != 'end' && matrix.goarch != 'end'
        with:
          go-version: 1.24

      - name: Cache downloaded module
        uses: actions/cache@v4
        if: matrix.goos != 'end' && matrix.goarch != 'end'
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.goos }}-${{ matrix.goarch }}-${{ hashFiles('**/go.sum') }}

      - name: Build binary file
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          IS_PR: ${{ !!github.head_ref }}
        if: matrix.goos != 'end' && matrix.goarch != 'end'
        run: |
          if [ $GOOS = "windows" ]; then export BINARY_SUFFIX="$BINARY_SUFFIX.exe"; fi
          if $IS_PR ; then echo $PR_PROMPT; fi
          export BINARY_NAME="$BINARY_PREFIX-$GOOS-$GOARCH$BINARY_SUFFIX"
          export CGO_ENABLED=0
          go build -o "output/$BINARY_NAME" -trimpath -ldflags "$LD_FLAGS" .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: matrix.goos != 'end' && matrix.goarch != 'end'
        with:
          name: ${{ matrix.goos }}_${{ matrix.goarch }}
          path: output/

      - name: Upload to release
        uses: svenstaro/upload-release-action@v2
        if: matrix.goos != 'end' && matrix.goarch != 'end'
        with:
          repo_token: ${{ secrets.TOKEN }}
          file: "output/*"
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true


      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Copy bin to docker
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        run: "cp -a output/* docker/rootf/app/ohttps-webhook"

      - name: Build docker image
        uses: docker/build-push-action@v6
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        with:
          context: docker
          push: true
          tags: mhmzx/ohttps-webhook:latest,mhmzx/ohttps-webhook:${{ github.ref_name }}
          build-args: |
            APP_VERSION=${{ github.ref_name }}
